Студенты программной инженерии собрались в лыжный поход, но собственных лыж ни у одного студента, конечно, нет.

Поэтому N студентов ПИ (все разного роста) отправились на лыжную базу, где им было выделено N различных по длине пар лыж. 
Каждая пара имеет свой уникальный номер, но хранятся пары все вместе.

Необходимо разработать эффективный алгоритм для работника лыжной базы, помогающий подобрать каждому студенту подходящую пару лыж. 
По правилам лыжи должны быть на 5 единиц выше лыжника. 
Работник не может удержать сразу две пары лыж в руках (одна рука занята кошкой), поэтому лыжи нельзя сравнивать между собой. 
Сравнить студентов ПИ по росту невозможно, они убегают (сравнить можно только по рейтингу). 
Работнику остается прикладывать лыжи к студентам, определяя таким образом для каждой пары лыж, больше она, чем надо, меньше, или подходит студенту. 
Либо прикладывать студентов к паре лыж.

Формат ввода

На вход поступают данные о студентах и лыжах в следующем формате:
в первой строке количество студентов - N
Гарантируется, что 1<= N <= 500000.
во второй строке данные о студентах - <уникальный_номер_студента> <рост_в_некоторых_единицах> ;
Все числа целые, у всех студентов разный рост.
в третьей строке данные о лыжах - <ID_пары> <длина_в_некоторых_единицах >
Гарантируется, что целые числа: "номер студента", "рост", "id_лыж" и "длина лыж" в пределах от 1 до 1.000.000 (один миллион) включительно.
Смотреть примеры ниже.
Формат вывода

Одна строка - упорядоченный по возрастанию номеров студентов список пар <уникальный_номер_студента> <ID_пары>;

Количество пар должно быть ровно N, как и было во входных данных.
Все номера (студентов и лыж) должны быть из входных данных.

Пример 1
Ввод

5
1 156; 2 162; 3 159; 4 153; 5 150;
1 164; 5 161; 2 155; 4 167; 3 158; 

Вывод	

1 5; 2 4; 3 1; 4 3; 5 2; 

Пример 2
Ввод

6
1 160; 2 180; 3 172; 4 176; 5 168; 6 164;
5 177; 4 181; 3 165; 1 185; 2 169; 6 173; 

Вывод	

1 3; 2 1; 3 5; 4 4; 5 6; 6 2; 
